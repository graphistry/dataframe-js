{
  "name": "Dataframe-js",
  "tagline": "A javascript library providing another way to work with data",
  "body": "# dataframe-js\r\n**v1.0.0**\r\n\r\n![](https://travis-ci.org/Gmousse/dataframe-js.svg?branch=develop)\r\n\r\n\r\n**Official Website**: <https://gmousse.github.io/dataframe-js/>\r\n\r\n**Changelog**: [1.0.0](https://github.com/Gmousse/dataframe-js/blob/master/CHANGELOG.md)\r\n\r\n\r\n## Presentation\r\n\r\ndataframe-js provides another way to work with data in javascript (browser or server side) by using DataFrame, a data structure already used in some languages (Spark, Python, R, ...).\r\n\r\nA DataFrame is simply built on two concepts:\r\n- **Columns** provide ways to select your data and reorganize them.\r\n- **Rows** provide ways to modify or filter your data.\r\n\r\n````javascript\r\nconst df = new DataFrame(data, columns)\r\ndf.show()\r\n// DataFrame example\r\n| column1   | column2   | column3   | // <--- Columns\r\n------------------------------------\r\n| 3         | 3         | undefined | // <--- Row\r\n| 6         | 4         | undefined |\r\n| 8         | 5         | undefined |\r\n| undefined | 6         | undefined |\r\n````\r\n\r\ndataframe-js provides some **immutable objects** (DataFrame, Row...) and an API closed to **functional** programming and **SQL syntax**. You can sort, groupBy, join, and do complex manipulations with a simple sintax.\r\n\r\nIt is also compatible (import / export) with native JavaScript objects (Array, Hash...) and other formats (csv, json...).\r\n\r\nTo resume, dataframe-js contains:\r\n  * A core:\r\n    * DataFrame: Main Object, similar to sql table providing methods to manipulate and transform data.\r\n    * Row: Object contained into a DataFrame, providing lower level manipulations.\r\n    * GroupedDataFrame: DataFrame grouped by columns.\r\n\r\n\r\n  * Some modules:\r\n    * Stat: Basic statistics computations on DataFrame columns.\r\n    * Matrix: Matrix computations (scalar products, ...).\r\n    * SQL: SQL requests on DataFrame.\r\n\r\n## Installation\r\nvia git: `npm install git+https://github.com/Gmousse/dataframe-js.git`\r\n\r\nvia npm: `npm install dataframe-js`\r\n\r\nin the browser:\r\n  * not minified: `<script src=\"https://cdn.rawgit.com/Gmousse/dataframe-js/master/lib/browser/dataframe.js\"></script>`\r\n\r\n  * minified: `<script src=\"https://cdn.rawgit.com/Gmousse/dataframe-js/master/lib/browser/dataframe-min.js\"></script>`\r\n\r\n## Usage\r\n\r\n### Complete API documentation: [Index](https://gmousse.github.io/dataframe-js/doc/api.html)\r\n  * Core: [DataFrame](https://gmousse.github.io/dataframe-js/doc/api.html#dataframe), [Row](https://gmousse.github.io/dataframe-js/doc/api.html#row), [GroupedDataFrame](https://gmousse.github.io/dataframe-js/doc/api.html#groupeddataframe)\r\n  * Modules: [Stat](https://gmousse.github.io/dataframe-js/doc/api.html#stat), [Matrix](https://gmousse.github.io/dataframe-js/doc/api.html#matrix), [SQL](https://gmousse.github.io/dataframe-js/doc/api.html#sql)\r\n\r\n### Examples\r\n\r\n[A simple use of DataFrame for data exploration tasks](https://github.com/Gmousse/dataframe-js/blob/master/examples/titanic_analysis.js)\r\n\r\n[Unit tests](https://github.com/Gmousse/dataframe-js/blob/master/tests/)\r\n\r\n### Import\r\n\r\n```javascript\r\n// es6\r\nimport { DataFrame, Row } from 'dataframe-js';\r\n// es5\r\nvar DataFrame = require('dataframe-js').DataFrame;\r\n// Browser\r\nvar DataFrame = dfjs.DataFrame;\r\n```\r\n\r\n### Core usage\r\n\r\n#### DataFrame Creation\r\n\r\nYou can create a DataFrame by using mutiple ways:\r\n\r\n```javascript\r\nconst df = new DataFrame(data, columns);\r\n\r\n// From a collection (easier)\r\nconst df = new DataFrame([\r\n    {c1: 1, c2: 6}, // <------- A row\r\n    {c4: 1, c3: 2}\r\n], ['c1', 'c2', 'c3', 'c4']);\r\n\r\n// From a table\r\nconst df = new DataFrame([\r\n    [1, 6, 9, 10, 12], // <------- A row\r\n    [1, 2],\r\n    [6, 6, 9, 8, 9, 12],\r\n], ['c1', 'c2', 'c3', 'c4', 'c5', 'c6']);\r\n\r\n// From a dictionnary (Hash)\r\nconst df = new DataFrame({\r\n    column1: [3, 6, 8], // <------ A column\r\n    column2: [3, 4, 5, 6],\r\n}, ['column1', 'column2']);\r\n\r\n// From files\r\nDataFrame.fromText('file://my/absolue/path/myfile.txt').then(df => df);\r\nDataFrame.fromCSV('http://myurl/myfile.csv').then(df => df);\r\nDataFrame.fromJSON('http://myurl/myfile.json').then(df => df);\r\n```\r\nComplete list:\r\n[DataFrame](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#constructor)\r\n[DataFrame.fromText()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame.fromText),\r\n[DataFrame.fromCSV()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame.fromCSV),\r\n[DataFrame.fromJSON()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame.fromJSON)\r\n\r\n#### DataFrame Export\r\n\r\nIn the same way, you can also export or convert your DataFrame in files or in JavaScript Objects:\r\n\r\n```javascript\r\nconst df = new DataFrame(data, columns);\r\n\r\n// To native objects\r\ndf.toCollection();\r\ndf.toArray();\r\ndf.toDict();\r\n\r\n// To files\r\nDataFrame.toText(true, ';', '/my/absolue/path/myfile.txt');\r\nDataFrame.toCSV('file://my/absolue/path/myfile.csv');\r\nDataFrame.toJSON('/my/absolue/path/myfile.json');\r\n```\r\nComplete list:\r\n[.toDict()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toDict),\r\n[.toArray()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toArray),\r\n[.toCollection()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toCollection),\r\n[.toText()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toText),\r\n[.toCSV()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toCSV),\r\n[.toJSON()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#toJSON)\r\n\r\n#### DataFrame usage\r\n\r\nThe main Object of the dataframe-js library is the [DataFrame](https://gmousse.github.io/dataframe-js/doc/api.html#dataframe).\r\nIt provides 3 types of methods:\r\n\r\nInformations, giving details about your DataFrame.\r\n````js\r\n// Some examples\r\ndf.show();\r\ndf.dim();\r\n````\r\nComplete list:\r\n[.show()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#show),\r\n[.dim()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#dim),\r\n[.count()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#count),\r\n[.listColumns()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#listColumns)\r\n\r\nColumns manipulations, which provide solutions to select, reorganize, cast, join or analyze your data...\r\n````js\r\n// Some examples\r\ndf.select('column1', 'column3');\r\ndf.cast('column3', String);\r\ndf.distinct('column2');\r\ndf.innerJoin(df2, ['column2', 'column3']);\r\n````\r\nComplete list:\r\n[.select()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#select),\r\n[.withColumn()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#withColumn),\r\n[.countValue()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#countValue),\r\n[.distinct()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#distinct),\r\n[.unique()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#unique),\r\n[.restructure()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#restructure),\r\n[.rename()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#rename),\r\n[.renameAll()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#renameAll),\r\n[.cast()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#cast),\r\n[.castAll()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#castAll),\r\n[.drop()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#drop),\r\n[.groupBy()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#groupBy),\r\n[.sortBy()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#sortBy),\r\n[.join()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#join),\r\n[.innerJoin()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#innerJoin),\r\n[.outerJoin()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#outerJoin),\r\n[.fullJoin()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#fullJoin),\r\n[.leftJoin()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#leftJoin),\r\n[.rightJoin()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#rightJoin)\r\n\r\nRows manipulations, which provide ways to filter, modify, join, complete your data...\r\n````js\r\n// Some examples\r\ndf.push([1, 2, 3], [4, 5, 6]);\r\ndf.map(row => row.set('column2', row.get('column1') * 2));\r\ndf.filter(row => row.get('column2') !== 4);\r\ndf.union(df2);\r\n````\r\nComplete list:\r\n[.transpose()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#transpose),\r\n[.push()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#push),\r\n[.replace()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#replace),\r\n[.chain()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#chain),\r\n[.map()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#map),\r\n[.filter()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#filter),\r\n[.where()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#where),\r\n[.find()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#find),\r\n[.reduce()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#reduce),\r\n[.reduceRight()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#reduceRight),\r\n[.dropDuplicates()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#dropDuplicates),\r\n[.shuffle()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#shuffle),\r\n[.sample()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#sample),\r\n[.union()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#union)\r\n\r\n#### Rows Usage\r\n\r\nAs you could see, the Row api is used for example with [.map()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#map),\r\n, [.filter()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#filter) DataFrame Rows methods.\r\n\r\nThe Row API provides simple manipulations, to get, set delete or check data in each line of your DataFrames.\r\n````js\r\n// Some examples\r\nrow.get('column1');\r\nrow.set('column2', newValue);\r\n````\r\nComplete list:\r\n[Row](https://gmousse.github.io/dataframe-js/doc/api.html#Row#constructor),\r\n[.get()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#get),\r\n[.set()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#set),\r\n[.select()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#select),\r\n[.delete()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#delete),\r\n[.has()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#has),\r\n[.toDict()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#todict),\r\n[.toArray()](https://gmousse.github.io/dataframe-js/doc/api.html#Row#toarray)\r\n\r\n#### GroupedDataFrame Usage\r\n\r\nWhen you use the DataFrame [.groupBy()](https://gmousse.github.io/dataframe-js/doc/api.html#DataFrame#groupBy) method,  a new GroupedDataFrame object is created.\r\nIt can be used to create DataFrame aggregations (like SQL) in order to resume your data.\r\n\r\nEach group in the GroupedDataFrame is a DataFrame. When you aggregate a GroupedDataFrame Object, you get a DataFrame with one line per group, and with a new column \"aggregation\".\r\n````js\r\n// Some examples\r\nconst groupedDF = df.groupBy('column1', 'column2');\r\ngroupedDF.aggregate(group => group.count()).rename('aggregation', 'groupCount');\r\ndf.groupBy('column2', 'column3').aggregate(group => group.stat.mean('column4')).rename('aggregation', 'groupMean');\r\n````\r\nComplete list:\r\n[GroupedDataFrame](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#constructor),\r\n[.toCollection()](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#toCollection),\r\n[.show()](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#show),\r\n[.listGroups()](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#listGroups),\r\n[.listHashs()](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#listHashs),\r\n[.aggregate()](https://gmousse.github.io/dataframe-js/doc/api.html#GroupedDataFrame#aggregate)\r\n\r\n\r\n### Modules Usage\r\n\r\ndataframe-js can increase DataFrame API by using modules. Some modules are included by default, but you can also create your own.\r\n\r\n#### Default modules usage\r\n\r\nThe [Stat](https://gmousse.github.io/dataframe-js/doc/api.html#stat)\r\n module provides basic statistical computations on a DataFrame columns.\r\n\r\n````js\r\n// Some examples\r\ndf.stat.max('column1');\r\ndf.stat.mean('column1');\r\n````\r\nComplete list:\r\n[.min()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#min),\r\n[.max()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#max),\r\n[.sum()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#sum),\r\n[.mean()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#mean),\r\n[.average()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#average),\r\n[.var()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#var),\r\n[.sd()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#sd),\r\n[.stats()](https://gmousse.github.io/dataframe-js/doc/api.html#Stat#stats)\r\n\r\n\r\nThe [Matrix](https://gmousse.github.io/dataframe-js/doc/api.html#matrix) module provides mathematical matrix operations between DataFrames.\r\n\r\n````js\r\n// Some examples\r\ndf.matrix.add(df2);\r\ndf.matrix.product(8);\r\ndf.matrix.dot(df2);\r\n````\r\nComplete list:\r\n[.isCommutative()](https://gmousse.github.io/dataframe-js/doc/api.html#Matrix#isCommutative),\r\n[.product()](https://gmousse.github.io/dataframe-js/doc/api.html#Matrix#product),\r\n[.dot()](https://gmousse.github.io/dataframe-js/doc/api.html#Matrix#dot),\r\n[.add()](https://gmousse.github.io/dataframe-js/doc/api.html#Matrix#add)\r\n\r\nTo finish, the [SQL](https://gmousse.github.io/dataframe-js/doc/api.html#sql) module allows you to register temporary tables and to request on these, by using SQL syntax.\r\n\r\n````js\r\n// Some examples\r\n// Register a tmp table\r\ndf.sql.register('tmp2')\r\nDataFrame.sql.registerTable(df, 'tmp2')\r\n// Request on Table\r\nDataFrame.sql.request('SELECT * FROM tmp2 WHERE column1 = 6')\r\n````\r\nComplete list:\r\n[.register()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL#register),\r\n[DataFrame.registerTable()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.registerTable),\r\n[DataFrame.request()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.request),\r\n[DataFrame.listTables()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.listTables),\r\n[DataFrame.dropTable()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.dropTable),\r\n[DataFrame.dropTables()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.dropTables),\r\n[DataFrame.renameTable()](https://gmousse.github.io/dataframe-js/doc/api.html#SQL.renameTable)\r\n\r\n#### Modules creation\r\n\r\nEach module is a class with a constructor taking dataframe as parameter, and having a df and a name properties:\r\n\r\n```javascript\r\nclass FakeModule {\r\n    constructor(dataframe) {\r\n        this.df = dataframe;\r\n        this.name = 'fakemodule';\r\n    }\r\n\r\n    test(x) {\r\n        return this.df.withColumn('test', row => row.set('test', x * 2));\r\n    }\r\n}\r\n```\r\n\r\n#### Modules registration\r\n\r\nYou can register modules when you instantiate a DataFrame:\r\n\r\n```javascript\r\nconst df = new DataFrame(data, ['column1', 'column2', 'column3'], FakeModule, AnotherModule)\r\n// You can call module by its name\r\ndf.fakemodule.test(4)\r\n\r\nconsole.log(df.modules);\r\n// [SQL, Matrix, Stat, FakeModule, AnotherModule]\r\n```\r\n\r\nYou can also set default modules:\r\n\r\n````javascript\r\nDataFrame.setDefaultModules(FakeModule, Matrix);\r\nconst df = new DataFrame(data, ['column1', 'column2', 'column3'])\r\n\r\nconsole.log(df.modules);\r\n// [FakeModule, Matrix]\r\n````\r\n\r\n\r\n## Contribution\r\n\r\n[How to contribute ?](https://github.com/Gmousse/dataframe-js/blob/master/CONTRIBUTING.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}