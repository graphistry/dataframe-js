{
  "name": "Dataframe-js",
  "tagline": "A javascript library providing another way to work with data",
  "body": "# dataframe-js\r\n**v1.0.0**\r\n\r\n![](https://travis-ci.org/Gmousse/dataframe-js.svg?branch=feature%2Fsql)\r\n\r\n## Presentation\r\n\r\ndataframe-js provides another way to work with data in javascript (browser or server side) by using DataFrame, a data structure already used in some languages (Python, R, ...).\r\n\r\nA DataFrame is simply built on two concepts:\r\n- **Columns** provide ways to select your data and reorganize them.\r\n- **Rows** provide ways to modify or filter your data.\r\n\r\n````javascript\r\nconst df = new DataFrame(rawData, columns)\r\ndf.show()\r\n// DataFrame example\r\n| column1   | column2   | column3   | // <--- Columns\r\n------------------------------------\r\n| 3         | 3         | undefined | // <--- Row\r\n| 6         | 4         | undefined |\r\n| 8         | 5         | undefined |\r\n| undefined | 6         | undefined |\r\n````\r\n\r\ndataframe-js provides some **immutable objects** (DataFrame, Row...) and an API closed to **functional** programming and **SQL syntax**. You can sort, groupBy, join, and do complex manipulations with a simple sintax.\r\n\r\nIt is also compatible (import / export) with native JavaScript objects (Array, Hash...) and other formats (csv, json...).\r\n\r\nTo resume, dataframe-js contains:\r\n  * A core:\r\n    * DataFrame: Main Object, similar to sql table providing methods to manipulate and transform data.\r\n    * Row: Object contained into a DataFrame, providing lower level manipulations.\r\n    * GroupedDataFrame: DataFrame grouped by columns.\r\n\r\n\r\n  * Some modules:\r\n    * Stat: Basic statistics computations on DataFrame columns.\r\n    * Matrix: Matrix computations (scalar products, ...).\r\n    * SQL: SQL requests on DataFrame.\r\n\r\n\r\n## Installation\r\nvia git: `npm install git+https://github.com/Gmousse/dataframe-js.git`\r\n\r\nvia npm: `npm install dataframe-js`\r\n\r\nin the browser:\r\n  * not minified: `<script src=\"https://cdn.rawgit.com/Gmousse/dataframe-js/feature/sql/lib/browser/dataframe.js\"></script>`\r\n\r\n  * minified: `<script src=\"https://cdn.rawgit.com/Gmousse/dataframe-js/feature/sql/lib/browser/dataframe-min.js\"></script>`\r\n\r\n## Usage\r\n\r\nComplete API documentation: [Index](./doc/md-api/index.md)\r\n  * Core: [DataFrame](./doc/md-api/dataframe.md#DataFrame), [Row](./doc/md-api/row.md#Row), [GroupedDataFrame](./doc/md-api/groupedDataframe.md#GroupedDataFrame)\r\n  * Modules: [Stat](./doc/md-api/modules/stat.md#Stat), [Matrix](./doc/md-api/modules/matrix.md#Matrix), [SQL](./doc/md-api/modules/sql.md#SQL)\r\n\r\n### Examples\r\n\r\n[A simple use of DataFrame for data exploration tasks](./examples/titanic_analysis.js)\r\n\r\n[Unit tests](./tests/)\r\n\r\n### Import\r\n\r\n```javascript\r\n// es6\r\nimport { DataFrame, Row } from 'dataframe-js';\r\n// es5\r\nvar DataFrame = require('dataframe-js').DataFrame;\r\n// Browser\r\nvar DataFrame = dfjs.DataFrame;\r\n```\r\n\r\n### DataFrame usage\r\n\r\n#### DataFrame Creation\r\n\r\nYou can create a DataFrame by using mutiple ways:\r\n\r\n```javascript\r\nconst df = new DataFrame(data, columns);\r\n\r\n// From a collection (easier)\r\nconst df = new DataFrame([\r\n    {c1: 1, c2: 6}, // <------- A row\r\n    {c4: 1, c3: 2}\r\n], ['c1', 'c2', 'c3', 'c4']);\r\n\r\n// From a table\r\nconst df = new DataFrame([\r\n    [1, 6, 9, 10, 12], // <------- A row\r\n    [1, 2],\r\n    [6, 6, 9, 8, 9, 12],\r\n], ['c1', 'c2', 'c3', 'c4', 'c5', 'c6']);\r\n\r\n// From a dictionnary (Hash)\r\nconst df = new DataFrame({\r\n    column1: [3, 6, 8], // <------ A column\r\n    column2: [3, 4, 5, 6],\r\n}, ['column1', 'column2']);\r\n\r\n// From files\r\nDataFrame.fromText('file://my/absolue/path/myfile.txt').then(df => df)\r\nDataFrame.fromCSV('http://myurl/myfile.csv').then(df => df)\r\nDataFrame.fromJSON('http://myurl/myfile.json').then(df => df)\r\n```\r\n\r\n#### DataFrame API detail\r\n\r\n[Creation](./doc/index.md#creation): Create a DataFrame from files or from JavaScript objects.\r\n\r\n[Export](./doc/index.md#export): Export a DataFrame in different files format or javascript objects.\r\n\r\n[DataFrame informations](./doc/index.md#informations): Show some informations about your DataFrame.\r\n\r\n[Working with Columns](./doc/index.md#columns): Use Columns to format or to restructure your DataFrame.\r\n\r\n[Working with Rows](./doc/index.md#rows): Manipulate and transform rows of your DataFrame.\r\n\r\n[Working at Row level](./doc/index.md#row): Use the Row api to set or get some values when you map, filter or do other Rows manipulations...\r\n\r\n[Working with aggregates](./doc/index.md#groupeddataframe): Apply aggregations when you groupBy a DataFrame in order to resume your data.\r\n\r\n\r\n\r\n### Modules Usage\r\n\r\n#### Default modules API details\r\n\r\n[Stat](./doc/md-api/index.md#stat)\r\n\r\nThis module provides basic statistical computations on a DataFrame columns.\r\n\r\n````js\r\ndf.stat.*\r\n````\r\n\r\n[Matrix](./doc/md-api/index.md#matrix)\r\n\r\nThis module provides matrix operations between DataFrames.\r\n\r\n````js\r\ndf.matrix.*\r\n````\r\n\r\n[SQL](./doc/md-api/index.md#sql)\r\n\r\nThis module allows you to register temporary tables and to request on these, by using SQL syntax.\r\n\r\n````js\r\ndf.sql.*\r\n\r\n// Register a tmp table\r\ndf.sql.register('tmp2')\r\nDataFrame.sql.registerTable(df, 'tmp2')\r\n\r\n// Request on Table\r\nDataFrame.sql.request('SELECT * FROM tmp2 WHERE column1 = 6')\r\n````\r\n\r\n\r\n#### Modules creation\r\n\r\nEach module is a class with a constructor taking dataframe as parameter, and having a df and a name properties:\r\n\r\n```javascript\r\nclass FakeModule {\r\n    constructor(dataframe) {\r\n        this.df = dataframe;\r\n        this.name = 'fakemodule';\r\n    }\r\n\r\n    test(x) {\r\n        return this.df.withColumn('test', row => row.set('test', x * 2));\r\n    }\r\n}\r\n```\r\n\r\n#### Modules registration\r\n\r\nYou can register modules when you instantiate a DataFrame:\r\n\r\n```javascript\r\nconst df = new DataFrame(data, ['column1', 'column2', 'column3'], FakeModule, AnotherModule)\r\n// You can call module by its name\r\ndf.fakemodule.test(4)\r\n\r\nconsole.log(df.modules);\r\n// [SQL, Matrix, Stat, FakeModule, AnotherModule]\r\n```\r\n\r\nYou can also set defaultModules:\r\n\r\n````javascript\r\nDataFrame.setDefaultModules(FakeModule, Matrix);\r\nconst df = new DataFrame(data, ['column1', 'column2', 'column3'])\r\n\r\nconsole.log(df.modules);\r\n// [FakeModule, Matrix]\r\n````\r\n\r\n\r\n\r\n## Contribution\r\n\r\n[How to contribute ?](./CONTRIBUTING.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}